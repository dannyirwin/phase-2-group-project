{"version":3,"sources":["components/ColorSample.js","components/MainCard.js","components/GalleryCard.js","containers/GalleryContainer.js","App.js","reportWebVitals.js","index.js"],"names":["ColorSample","color","clipBoardEnabled","hexRef","useRef","className","style","backgroundColor","ref","App","palette","addPalette","changeTheme","toggleView","useState","colors","setColors","imageUrl","setImageUrl","hasExtractedColors","setHasExtractedColors","useEffect","href","target","rel","getColors","newColors","src","alt","isTemplate","onSubmit","event","preventDefault","newUrl","FormData","get","type","name","placeholder","required","value","onClick","map","id","GalleryCard","removePalette","GalleryContainer","palettes","length","newPalette","palettesUrl","setPalettes","mainPalette","setMainPalette","setTheme","savePalettesToDB","options","method","headers","Accept","body","JSON","stringify","fetch","stopPropagation","forEach","i","document","documentElement","setProperty","then","res","json","url","console","log","newPalettes","filter","deletePaletteFromDB","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f877c341.chunk.js","sourcesContent":["import { useRef } from \"react\";\nimport { ClipboardOutline } from \"react-ionicons\";\n\nexport default function ColorSample({ color, clipBoardEnabled }) {\n  const hexRef = useRef(null);\n\n  return (\n    <div className=\"ColorSample\">\n      <div\n        className=\"color-sample-display\"\n        style={{\n          backgroundColor: color\n        }}\n      >\n        <div className=\"color-sample-details\">\n          <p ref={hexRef}>{color}</p>\n          {clipBoardEnabled ? (\n            <ClipboardOutline color={\"rgba(0, 0, 0, 0.7)\"} />\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useState, useEffect } from \"react\";\n\nimport { ColorExtractor } from \"react-color-extractor\";\nimport ColorSample from \"./ColorSample\";\n\nexport default function App({ palette, addPalette, changeTheme, toggleView }) {\n  const [colors, setColors] = useState(palette.colors || []);\n  const [imageUrl, setImageUrl] = useState(palette.imageUrl || \"noUrl\");\n  const [hasExtractedColors, setHasExtractedColors] = useState(false);\n\n  const showColorSamples = () => {\n    return colors.map((color, id) => {\n      return (\n        <ColorSample\n          color={color}\n          key={id}\n          clipBoardEnabled={false} //TODO: change to true to make clipboard show\n        />\n      );\n    });\n  };\n\n  const getColors = newColors => setColors(newColors);\n\n  const handleExtractColors = event => {\n    event.preventDefault();\n    const newUrl = new FormData(event.target).get(\"imageUrl\");\n    setImageUrl(newUrl);\n    setHasExtractedColors(true);\n  };\n\n  const handleSavePalette = event => {\n    addPalette({ colors, imageUrl, isTemplate: false });\n    toggleView();\n  };\n\n  useEffect(() => {\n    changeTheme(null, colors);\n  }, [colors]);\n\n  return (\n    <div className=\"MainCard card\">\n      <a\n        className=\"colorExtractor-container\"\n        href={imageUrl}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <ColorExtractor getColors={getColors}>\n          <img\n            className=\"colorExtractor-image\"\n            src={imageUrl}\n            alt=\"Display of url\"\n          />\n        </ColorExtractor>\n      </a>\n      {palette.isTemplate ? (\n        <form onSubmit={handleExtractColors}>\n          <input\n            type=\"url\"\n            name=\"imageUrl\"\n            placeholder=\"Source Image Url\"\n            required\n          ></input>\n          <input\n            className=\"mainCard-button\"\n            type=\"submit\"\n            value=\"Extract Colors\"\n          ></input>\n          {hasExtractedColors ? (\n            <input\n              className=\"mainCard-button\"\n              type=\"submit\"\n              onClick={handleSavePalette}\n              value=\"Save palette\"\n            ></input>\n          ) : null}\n        </form>\n      ) : null}\n      <div className=\"colors-container\">{showColorSamples()}</div>\n      <button className=\"mainCard-button\" onClick={() => toggleView()}>\n        Go To Gallery\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ColorSample from \"./ColorSample\";\nimport { TrashBinOutline, ColorPaletteOutline } from \"react-ionicons\";\n\nexport default function GalleryCard({\n  palette,\n  toggleView,\n  changeTheme,\n  removePalette\n}) {\n  const { id, colors, imageUrl } = palette;\n\n  const showColorSamples = () => {\n    return colors.map((color, id) => {\n      return <ColorSample color={color} key={id} />;\n    });\n  };\n\n  return (\n    <div className=\"GalleryCard\" key={id} onClick={() => toggleView(palette)}>\n      <div className=\"gallery-image-container\">\n        <img\n          className=\"gallery-image\"\n          src={imageUrl}\n          alt=\"Display of url\"\n        ></img>\n      </div>\n      <div className=\"colors-container\">{showColorSamples()}</div>\n      <button onClick={event => changeTheme(event, colors)}>\n        <ColorPaletteOutline className=\"icon\" color=\"white\" />\n      </button>\n      <button onClick={event => removePalette(event, palette)}>\n        <TrashBinOutline className=\"icon\" color=\"white\" />\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport GalleryCard from \"../components/GalleryCard\";\n\nexport default function GalleryContainer({\n  palettes,\n  toggleView,\n  changeTheme,\n  removePalette\n}) {\n  const showGalleryCards = () => {\n    return palettes.map(palette => (\n      <GalleryCard\n        key={palette.id}\n        palette={palette}\n        toggleView={toggleView}\n        removePalette={removePalette}\n        changeTheme={changeTheme}\n      />\n    ));\n  };\n\n  return (\n    <div className=\"GalleryContainer\">\n      <div className=\"gallery-background\">\n        {showGalleryCards()}\n        <button\n          className=\"new-palette-button\"\n          onClick={() => toggleView(\"newPalette\")}\n        >\n          {palettes.length === 0 ? \"Create a Palette\" : \"Add New palette\"}\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\nimport MainCard from \"./components/MainCard\";\n\nimport \"./App.css\";\nimport GalleryContainer from \"./containers/GalleryContainer\";\n\nconst newPalette = {\n  isTemplate: true,\n  colors: [\"#7f7f7f\", \"#bcbcbc\", \"#424242\", \"#888888\", \"#bcbcbc\", \"#444444\"],\n  imageUrl: \"https://m.media-amazon.com/images/I/61dvguSUsaL._AC_SL1500_.jpg\"\n};\n\nconst palettesUrl = \"http://localhost:3000/palettes/\";\n\nexport default function App() {\n  const [palettes, setPalettes] = useState([]);\n  const [mainPalette, setMainPalette] = useState(null);\n  const [theme, setTheme] = useState(newPalette.colors);\n\n  const addPalette = palette => {\n    setMainPalette(palette);\n    savePalettesToDB(palette);\n  };\n\n  const toggleView = (palette = null) => {\n    palette === \"newPalette\"\n      ? setMainPalette(newPalette)\n      : setMainPalette(palette);\n  };\n\n  const getPalettesFromDB = () => {\n    fetch(palettesUrl)\n      .then(res => res.json())\n      .then(palettes => setPalettes(palettes));\n  };\n\n  const savePalettesToDB = palette => {\n    setPalettes([...palettes, palette]);\n    const options = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(palette)\n    };\n    fetch(palettesUrl, options);\n  };\n\n  const deletePaletteFromDB = id => {\n    const options = {\n      method: \"DELETE\"\n    };\n    fetch(palettesUrl + id, options);\n  };\n\n  const changeTheme = (event, colors) => {\n    if (event) {\n      event.stopPropagation();\n    }\n    setTheme(colors);\n    colors.forEach((color, i) => {\n      document.documentElement.style.setProperty(`--color${i + 1}`, color);\n    });\n  };\n\n  const removePalette = (event, palette) => {\n    event.stopPropagation();\n    const url = palette.imageUrl;\n    const id = palette.id;\n\n    console.log(id);\n\n    const newPalettes = palettes.filter(palette => {\n      return id ? palette.id !== id : palette.imageUrl !== url;\n    });\n    console.log(newPalettes);\n    setPalettes(newPalettes);\n\n    deletePaletteFromDB(id);\n  };\n\n  useEffect(() => {\n    getPalettesFromDB();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {mainPalette ? (\n        <MainCard\n          palette={mainPalette || newPalette}\n          toggleView={toggleView}\n          addPalette={addPalette}\n          changeTheme={changeTheme}\n        />\n      ) : (\n        <GalleryContainer\n          palettes={palettes}\n          toggleView={toggleView}\n          removePalette={removePalette}\n          changeTheme={changeTheme}\n        />\n      )}\n      <div className=\"lines\">\n        <div className=\"line\"></div>\n        <div className=\"line\"></div>\n        <div className=\"line\"></div>\n        <div className=\"line\"></div>\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}